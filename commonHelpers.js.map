{"version":3,"file":"commonHelpers.js","sources":["../src/js/API(pixabay).js","../src/js/galleryMarkups.js","../src/main.js"],"sourcesContent":["// adding all of necessary information to the API from https://pixabay.com/api/docs/\nconst baseURL = 'https://pixabay.com/api/';\nconst myPixabayKey = \"44872402-0762bbf0a5ccd686fb6258473\";\nconst image_type = 'photo';\nconst orientation = 'horizontal';\nconst safesearch = true;\n\n// making a query to the API that returns answers for user's searching input\nexport function getPictures(query) {\n    return fetch(`${baseURL}?key=${myPixabayKey}&q=${query}&image_type=${image_type}&orientation=${orientation}&safesearch=${safesearch}`)\n        .then((response) => {\n            if (!response.ok) {\n                throw new Error(response.status);\n            }\n            return response.json();\n        });\n}","// adding pop-ups from izitoasts gallery\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n// adding gallery library from simplelightbox \nimport SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\n// making a function that check if we had any answers/hits in a database of API\nexport function createMarkup({ hits }, cardContainer) {\n    if (hits.length === 0) {\n        catchError();\n        return;\n    }\n\n// if API has a datas, create a markup with answers/response with infos adding to the API configuration\n    const markup = hits.map(({\n        webformatURL,\n        largeImageURL,\n        tags,\n        likes,\n        views,\n        comments,\n        downloads }) => {\n        \n// making an innerHTML with a gallery structure by making list\n        return `\n            <li class=\"list-item\">\n                <a href=\"${largeImageURL}\">\n                    <img class=\"card-image\"\n                    src=\"${webformatURL}\"\n                    alt=\"${tags}\"\n                    width=\"360\">\n                </a>\n                <ul class=\"card-description-list\">\n                    <li class=\"card-description-item\">\n                        <h3 class=\"card-description-title\">Likes</h3>\n                        <p class=\"card-description-value\">${likes}</p>\n                    </li>\n                    <li class=\"card-description-item\">\n                        <h3 class=\"card-description-title\">Views</h3>\n                        <p class=\"card-description-value\">${views}</p>\n                    </li>\n                    <li class=\"card-description-item\">\n                        <h3 class=\"card-description-title\">Comments</h3>\n                        <p class=\"card-description-value\">${comments}</p>\n                    </li>\n                    <li class=\"card-description-item\">\n                        <h3 class=\"card-description-title\">Downloads</h3>\n                        <p class=\"card-description-value\">${downloads}</p>\n                    </li>\n                </ul>\n            </li>\n        `;\n    }).join('');\n\n// as an answer is need to making markup in a containers\n    cardContainer.innerHTML = markup;\n    const lightbox = new SimpleLightbox('.card-container a', {\n        captions: true,\n        captionsData: 'alt',\n        captionPosition: 'bottom',\n        captionDelay: 250,\n    });\n\n// refreshing simplelightbox gallery top see a results\n    lightbox.refresh();\n}\n// making sure that API give error information during an empty results by usin iziToasts library\nexport function catchError() {\n    iziToast.error({\n        message: 'Sorry, there are no images matching your search query. Please try again!',\n    });\n}","import { getPictures } from \"./js/API(pixabay).js\";\nimport { createMarkup, catchError } from \"./js/galleryMarkups.js\";\n\nconst searchForm = document.querySelector(\".search-form\");\nconst cardContainer = document.querySelector(\".card-container\");\nconst loader = document.querySelector(\".loader\");\nsearchForm.addEventListener(\"submit\", handlerSearch);\n\nfunction handlerSearch(event) {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    const userValue = form.elements.search.value.toLowerCase();\n\n    loader.style.display = \"block\";\n\n    getPictures(userValue)\n        .then((data) => createMarkup(data, cardContainer))\n        .catch(catchError)\n        .finally(() => {\n            form.reset();\n            loader.style.display = \"none\";\n        });\n}"],"names":["baseURL","myPixabayKey","image_type","orientation","safesearch","getPictures","query","response","createMarkup","hits","cardContainer","catchError","markup","webformatURL","largeImageURL","tags","likes","views","comments","downloads","SimpleLightbox","iziToast","searchForm","loader","handlerSearch","event","form","userValue","data"],"mappings":"6vBACA,MAAMA,EAAU,2BACVC,EAAe,qCACfC,EAAa,QACbC,EAAc,aACdC,EAAa,GAGZ,SAASC,EAAYC,EAAO,CAC/B,OAAO,MAAM,GAAGN,CAAO,QAAQC,CAAY,MAAMK,CAAK,eAAeJ,CAAU,gBAAgBC,CAAW,eAAeC,CAAU,EAAE,EAChI,KAAMG,GAAa,CAChB,GAAI,CAACA,EAAS,GACV,MAAM,IAAI,MAAMA,EAAS,MAAM,EAEnC,OAAOA,EAAS,MAC5B,CAAS,CACT,CCPO,SAASC,EAAa,CAAE,KAAAC,CAAM,EAAEC,EAAe,CAClD,GAAID,EAAK,SAAW,EAAG,CACnBE,IACA,MACH,CAGD,MAAMC,EAASH,EAAK,IAAI,CAAC,CACrB,aAAAI,EACA,cAAAC,EACA,KAAAC,EACA,MAAAC,EACA,MAAAC,EACA,SAAAC,EACA,UAAAC,KAGO;AAAA;AAAA,2BAEYL,CAAa;AAAA;AAAA,2BAEbD,CAAY;AAAA,2BACZE,CAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DAM6BC,CAAK;AAAA;AAAA;AAAA;AAAA,4DAILC,CAAK;AAAA;AAAA;AAAA;AAAA,4DAILC,CAAQ;AAAA;AAAA;AAAA;AAAA,4DAIRC,CAAS;AAAA;AAAA;AAAA;AAAA,SAKhE,EAAE,KAAK,EAAE,EAGVT,EAAc,UAAYE,EACT,IAAIQ,EAAe,oBAAqB,CACrD,SAAU,GACV,aAAc,MACd,gBAAiB,SACjB,aAAc,GACtB,CAAK,EAGQ,QAAO,CACpB,CAEO,SAAST,GAAa,CACzBU,EAAS,MAAM,CACX,QAAS,0EACjB,CAAK,CACL,CCtEA,MAAMC,EAAa,SAAS,cAAc,cAAc,EAClDZ,EAAgB,SAAS,cAAc,iBAAiB,EACxDa,EAAS,SAAS,cAAc,SAAS,EAC/CD,EAAW,iBAAiB,SAAUE,CAAa,EAEnD,SAASA,EAAcC,EAAO,CAC1BA,EAAM,eAAc,EAEpB,MAAMC,EAAOD,EAAM,cACbE,EAAYD,EAAK,SAAS,OAAO,MAAM,cAE7CH,EAAO,MAAM,QAAU,QAEvBlB,EAAYsB,CAAS,EAChB,KAAMC,GAASpB,EAAaoB,EAAMlB,CAAa,CAAC,EAChD,MAAMC,CAAU,EAChB,QAAQ,IAAM,CACXe,EAAK,MAAK,EACVH,EAAO,MAAM,QAAU,MACnC,CAAS,CACT"}